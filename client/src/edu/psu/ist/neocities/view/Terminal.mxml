<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%" height="100%" title="Terminal" xmlns:view="edu.psu.ist.neocities.view.*" creationComplete="panel1_creationCompleteHandler(event)" >
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			
			import com.pnwrain.easyCG.events.ControlEvent;
			import com.pnwrain.easyCG.model.ModelFactory;
			
			import edu.psu.ist.neocities.model.LocationModel;
			import edu.psu.ist.neocities.model.ResourceModel;
			import edu.psu.ist.neocities.model.RoleModel;
			import edu.psu.ist.neocities.value.ResourceVO;
			import edu.psu.ist.neocities.value.UnitVO;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			[Bindable]
			public var lModel :LocationModel = ModelFactory.getModel("LocationModel") as LocationModel;
			
			[Bindable]
			public var rModel :RoleModel = ModelFactory.getModel("RoleModel") as RoleModel;
			
			[Bindable]
			public var reModel :ResourceModel = ModelFactory.getModel("ResourceModel") as ResourceModel;
			
			//private var priorities : ArrayCollection = new ArrayCollection();
			//private var numPriorities :int = 5;
			
			
			private function resourceLabelFunction(item:Object, column:DataGridColumn):String {
				return reModel.getResource((item as UnitVO).resourceID.toString()).label;
			}
			
			private function terminalLabelFunction(item:Object) : String {
				categories.selectedIndex = -1;
				this.enableDispatch();
				
				return "> " + item.toString();
			}
			
			private function validateResource(resource : ResourceVO) : void
			{
				//Alert.show(resource.isAction + "");
				//if (resource.isAction) { priorityBar.enabled = true; }
				//else { priorityBar.enabled = false; 
				//priorityBar.selectedIndex = -1;}
				
				this.enableDispatch();
			}
			
			
			
						
			protected function dispatch(event:MouseEvent):void
			{
				var dispatchEvent : ControlEvent = new ControlEvent('evt_dispatch');
				var unitList : ArrayCollection = new ArrayCollection();
				var resource : ResourceVO = categories.selectedItem as ResourceVO;
				
				// creates dummy resource to dispatch back to the server
				var unit :UnitVO = new UnitVO(-9999, resource.resourceID, "");
								
				/*if (resource.isAction)
				{
					unit.setPriority = priorityBar.selectedIndex + 2;		// so the scale is 2-6 rather than 1-5
				}
				else
				{
					unit.setPriority = 1;
				}*/
				unit.setPriority = 3; // Added after removing the block above and removing the priorityBar
								
				// Add selected item as unit to dispatch
				unitList.addItem(unit);
				
				dispatchEvent.data = unitList; 
				dispatchEvent.dispatch();
				
				// Return view to normal
				categories.selectedIndex = -1;
				//this.priorityBar.selectedIndex = -1;
				//priorityBar.enabled = false;
			}
			
			protected function panel1_creationCompleteHandler(event:FlexEvent):void
			{
				/* Disabled after removing prioritiesBar
				var temp : Object;
				for (var i :int = 1; i <= this.numPriorities; i++)
				{
					temp = new Object();
					temp.label = i.toString();
					
					priorities.addItem(temp);
				}*/
				
				
			}
			
			public function enableDispatch() : void
			{	
				var resource :ResourceVO = categories.selectedItem as ResourceVO;
				
				if (lModel.selectedLocation == null || lModel.selectedLocation.id == -1)
				{
					dispatchButton.setStyle("chromeColor","#A40000");
					dispatchButton.enabled = false;
					return;					
				}
				
				if (categories.selectedIndex == -1)
				{
					dispatchButton.setStyle("chromeColor","#A40000");
					dispatchButton.enabled = false;
					return;
				}
				
				if (!resource.isAction)
				{
					dispatchButton.enabled = true;
					dispatchButton.setStyle("chromeColor","#3ea400");
					return;
				}
				
				/*    Removed priorityBar
				if (priorityBar.selectedIndex != -1)
				{
					dispatchButton.enabled = true;
					dispatchButton.setStyle("chromeColor","#3ea400");
					return;
				}
				
				dispatchButton.setStyle("chromeColor","#A40000");
				dispatchButton.enabled = false;*/
				
				// Below was modified due to removing priorityBar (see above)
				dispatchButton.enabled = true;
				dispatchButton.setStyle("chromeColor","#3ea400");
				
				return;
			}
			
		]]>
	</fx:Script>
	<s:VGroup paddingBottom="5" paddingTop="5" width="100%" height="100%">
		<s:Label width="100%" fontSize="15" fontWeight="bold"
				 text="Current Location: {lModel.selectedLocation.name}"/>
		<s:HGroup paddingBottom="5" paddingTop="5" width="100%" height="100%" gap="0">
			
			<s:List id="feedbackTerminal" width="100%" height="100%" chromeColor="#000000"
					color="#1EFF00" contentBackgroundColor="#000000"
					dataProvider="{lModel.selectedLocation.feedback}" focusColor="#000000"
					labelFunction="terminalLabelFunction"
					fontFamily="Courier New" rollOverColor="#000000" selectionColor="#000000"
					useHandCursor="false">
					<s:layout>
						<s:VerticalLayout gap = "0" horizontalAlign="justify" />
					</s:layout>
			</s:List>
			
			<s:Group width="30%" height="100%">
				<s:layout>
					<s:VerticalLayout verticalAlign="middle" 
									  paddingRight="5"  paddingBottom="5" />
				</s:layout>
				<s:VGroup height="100%" width="100%" 
						  paddingLeft="1" paddingRight="1"
						  verticalAlign="middle">
					<mx:DataGrid id="categories" width="100%" height="100%"
								 itemClick="{this.validateResource(categories.selectedItem as ResourceVO)}" 
								 variableRowHeight="true" horizontalScrollPolicy="off"
								 dataProvider="{rModel.currentPlayer.resources}">
								
						<mx:columns> <!--labelFunction="resourceLabelFunction"-->
							<mx:DataGridColumn headerText="Category" itemRenderer="edu.psu.ist.neocities.component.UnitLabel"  />
						</mx:columns>
					
					</mx:DataGrid>
				</s:VGroup>
				<s:VGroup  height="10%" width="100%" 
						   paddingTop="5" paddingBottom="5" paddingLeft="1" paddingRight="1"
						   verticalAlign="middle">
				<!--	REMOVED PRIORITY BUTTON FOR CYBERMURI PROJECT
					<s:Label text="Set Priority: " />			
					<mx:ToggleButtonBar id="priorityBar" itemClick="{enableDispatch()}" dataProvider="{this.priorities}" labelField="label" width="100%" enabled="false" />
				-->	
				</s:VGroup>
				<s:Button id="dispatchButton" width="100%" label="File Report" chromeColor="#A40000"
						  click="dispatch(event)" enabled="false"/>
			</s:Group>
			
		</s:HGroup>
	</s:VGroup>
</s:Panel>
